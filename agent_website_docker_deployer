pipeline {
    agent {label params.AGENT_LABEL} //Define the agent to run the pipeline

    parameters {
        choice(name: 'AGENT_LABEL', choices:['local', 'agent1', 'agent2', 'agent3', 'agent4'], description: 'Agent to run the pipeline') //Define the parameter array to choose the agent from
        string(name: 'REPO_URL', defaultValue: 'github.com/jcardogo/AlejandroCardoso_website.git', description: 'Git repository URL') // Define the Git repository URL
        string(name: 'BRANCH', defaultValue: 'master', description: 'Branch to checkout') // Define the branch to checkout
        string(name: 'ARTIFACTORY_DOCKER_REGISTRY', defaultValue: 'artifactory.example.com', description: 'Your Artifactory Docker registry domain') // Define the Artifactory Docker registry domain
        string(name: 'ARTIFACTORY_REPO_PATH', defaultValue: 'my-docker-repo', description: 'Path to your Docker repo in Artifactory') // Define the path to your Docker repo in Artifactory
        string(name: 'APP_IMAGE_NAME', defaultValue: 'my-nginx-website', description: 'Name of the application Docker image')
    }

    stages {
        stage('Wipe Workspace') {
            steps {
                echo '***** Starting wipe up working directory *****'
                deleteDir()
                echo '-------wipe up done-------'
            }
        }

        stage('Create Directory'){
            steps {
                script {
                    echo '***** Creating directory *****'
                    sh 'mkdir -p website_content'
                    echo '-------directory created-------'
                }
            }
        }

        stage('Checkout website content'){
            steps {
                echo '***** Checking out website content *****'
                dir ('website_content'){
                    withCredentials([usernamePassword(credentialsId: 'Github_PAT', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_PWD')]) {
                        git url: "https://${params.REPO_URL}", credentialsId: 'Github_PAT'
                    }
                }
                echo '-------checkout done-------'
            }
        }

        stage('Dockerize Nginx'){
            steps {
                echo '***** Dockerizing website on Nginx *****'
                script {
                    sh '''
                        echo "FROM nginx:alpine" > Dockerfile
                        echo "COPY website_content/ /usr/share/nginx/html/" >> Dockerfile 
                        docker build -t my-nginx-image -f Dockerfile .
                        #docker run -d -p 8086:80 --name my-nginx-container my-nginx-image #commentent this line if you don't want to run the container
                    '''
                }
                echo '-------Dockerizing done-------'  
            }   
        }

         // --- NEW STAGE: PUBLISH DOCKER IMAGE TO ARTIFACTORY ---
        stage('Publish Docker Image to Artifactory') {
            steps {
                echo '***** Publishing Docker image to Artifactory *****'
                script {
                    withCredentials([usernamePassword(credentialsId: 'Artifactory_Docker_Creds', usernameVariable: 'ARTIFACTORY_USER', passwordVariable: 'ARTIFACTORY_PWD')]) {
                        // 1. Define the full target image name for Artifactory
                        // Example: artifactory.example.com/my-docker-repo/my-nginx-website:1
                        def fullArtifactoryImage = "${params.ARTIFACTORY_DOCKER_REGISTRY}/${params.ARTIFACTORY_REPO_PATH}/${params.APP_IMAGE_NAME}:${env.BUILD_NUMBER}"

                        // 2. Log in to Artifactory Docker registry
                        sh "docker login -u ${ARTIFACTORY_USER} -p ${ARTIFACTORY_PWD} ${params.ARTIFACTORY_DOCKER_REGISTRY}"

                        // 3. Tag the locally built image with the Artifactory path
                        sh "docker tag my-nginx-image ${fullArtifactoryImage}"

                        // 4. Push the tagged image to Artifactory
                        sh "docker push ${fullArtifactoryImage}"

                        // Optional: Logout from Docker registry (good practice)
                        sh "docker logout ${params.ARTIFACTORY_DOCKER_REGISTRY}"

                        echo "Successfully pushed image: ${fullArtifactoryImage}"
                    }
                }
                echo '-------Image published-------'
            }
        }
        // --- END NEW STAGE ---


        stage('Wait 10 minutes again') {
            steps {
                echo '***** Waiting 10 minutes start*****'
                script {
                    sleep time: 10, unit: 'MINUTES'
                }
                echo '-------Waiting 10 minutes done-------'
            }
        }

        stage('Stop and remove Docker containers') {
            steps {
                echo '***** Stopping and removing Docker containers *****'
                script {
                    sh 'docker stop $(docker ps -a -q)'
                    sh 'docker rm $(docker ps -a -q)'
                    sh 'docker image ls -q | xargs -r docker rmi | true'
                }
                echo '-------Docker containers stopped and removed-------'
            }
        }

    }
}