pipeline {
    // This is a Jenkins pipeline script for deploying a website using Docker and Nginx over dockerhub and running it on a Jenkins agent triggered by github push.
    
    agent {label params.AGENT_LABEL} //Define the agent to run the pipeline

    triggers {
        githubPush() // Trigger the pipeline on GitHub push events
    }
    
    parameters {
        choice(name: 'AGENT_LABEL', choices:['local', 'agent1', 'agent2', 'agent3', 'agent4'], description: 'Agent to run the pipeline') //Define the parameter array to choose the agent from
        choice(name: 'BRANCH' , choices:['master', 'dockerhub'], description: 'Branch to run the pipeline from') //Define the parameter array to choose the branch from
        string(name: 'REPO_URL', defaultValue: 'github.com/jcardogo/AlejandroCardoso_website.git', description: 'Git repository URL')
        // DOCKERHUB parametrs
        string(name: 'DOCKERHUB_CREDENTIALS_ID', defaultValue: 'dockerhub_jcardogo', description: 'Jenkins Credentials ID for Docker Hub login')
        string(name: 'DOCKERHUB_REPO_NAME', defaultValue: 'acardogo', description: 'Docker Hub repository name')
    }

    stages {
        stage('Wipe Workspace') {
            steps {
                echo '***** Starting wipe up working directory *****'
                deleteDir() // This will delete the current workspace directory
                echo '-------wipe up done-------'
            }
        }

        stage('Create Directory'){
            steps {
                script {
                    echo '***** Creating directory *****'
                    sh 'mkdir -p website_content' // Create a directory to hold the website content
                    echo '-------directory created-------'
                }
            }
        }

        stage('Checkout website content'){
            steps {
                echo '***** Checking out website content *****'
                // Checkout the website content from the specified Git repository
                dir ('website_content'){
                    withCredentials([usernamePassword(credentialsId: 'Github_PAT', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_PWD')]) {
                        git url: "https://${params.REPO_URL}", credentialsId: 'Github_PAT', branch: 'master'
                    }
                }
                echo '-------checkout done-------'
            }
        }

        stage('Dockerize Nginx'){
            steps {
                echo '***** Dockerizing website on Nginx *****'
                // Create a Dockerfile to build an Nginx image with the website content
                script {
                    sh '''
                        echo "FROM nginx:alpine" > Dockerfile
                        echo "COPY website_content/ /usr/share/nginx/html/" >> Dockerfile
                        docker build -t my-nginx-image:latest -f Dockerfile .
                    '''
                }
                echo '-------Dockerizing done-------'
            }
        }

        stage('Push Image to Docker Hub') {
            steps {
                echo '***** Pushing image to Docker Hub *****'
                script {
                    def dockerImageTag = "${env.BUILD_NUMBER}" // e.g., '1', '2', '3', etc.
                    
                    withCredentials([usernamePassword(credentialsId: params.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        def fullImageName = "${DOCKER_USER}/${params.DOCKERHUB_REPO_NAME}:${dockerImageTag}"
                        
                        echo "Tagging image my-nginx-image:latest as ${fullImageName}" // Tag the local image with the full name
                        sh "docker tag my-nginx-image:latest ${fullImageName}" // Tag the local image with the full name
                        sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin" // Login to Docker Hub using password from credentials
                        echo "Pushing image ${fullImageName} to Docker Hub" // Push the tagged image to Docker Hub
                        sh "docker push ${fullImageName}" // Push the tagged image to Docker Hub

                        // Store the full image name in an environment variable for later stages
                        env.FULL_DOCKER_IMAGE_NAME = fullImageName
                    }
                }
                echo '-------Image pushed to Docker Hub-------'
            }
        }

        stage('Run Docker Container (Temporary for testing)'){
            steps {
                echo '***** Running Docker container locally for testing *****'
                script {
                    def containerName = "test-website-${env.BUILD_NUMBER}" // Unique container name based on build number
                    sh 'docker run -d -p 8086:80 --name ' + containerName + ' ' + env.FULL_DOCKER_IMAGE_NAME // Run the Docker container in detached mode, mapping port 8086 to port 80 of the container
                }
                echo '-------Container running-------'
            }
        }

        stage('Wait 3 minutes (for container to start)') {
            steps {
                echo '***** Waiting 3 minutes for container to start *****'
                script {
                    sleep time: 3, unit: 'MINUTES'
                }
                echo '-------Waiting done-------'
            }
        }

        stage('Stop and remove Docker containers') {
            steps {
                echo '***** Stopping and removing Docker containers and images *****'
                script {
                     withCredentials([usernamePassword(credentialsId: params.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        def pushedImageName = env.FULL_DOCKER_IMAGE_NAME
                        def containerName = "test-website-${env.BUILD_NUMBER}"

                        sh "docker stop ${containerName} || true" // Stop the Docker container if it's running
                        sh "docker rm ${containerName} || true" // Stop and remove the Docker container
                        sh "docker rmi my-nginx-image:latest || true" // Remove the local Docker image
                        sh "docker rmi ${pushedImageName} || true" // Remove the pushed image from the local Docker registry
                        sh "docker logout" // Log out from Docker Hub
                        sh 'docker system prune -f' // Clean up unused Docker images, containers, and networks
                     }
                }
                echo '-------Docker containers and images stopped and removed-------'
            }
        }
    }
}