DevSecOps is basically adding security testing, and protection, to the software development lifecycle. It combines development, security, and operations. And applies them to the CI/CD pipeline. Starting early in the process. So, why is it used? The short answer is speed and efficiency. The longer answer is that software development in CI/CD moves so fast, it has to rely on automation for certain processes. Such as security testing, and continuous deployment. This can introduce security risks. In the past, security wasn't always prioritized as it is today. You typically developed the software and secured it later. You've probably seen enough security failures and breaches make the news to realize, like the software developers did, that security after the fact, doesn't work very well. DevSecOps is a process for introducing security measures and testing, early in the software development process. This is often called shift-left security. As a Python programmer, DevSecOps will effect how you develop and deliver your code. In addition to cleaning it before packaging it up in a docker file, DevSecOps also shifts most of the initial burden for security onto the programmers developing the software. You'll be asked to develop and write smaller, more modular code that security tested, using security scanning tools, like static application security tests, or SAST.
The code itself, is more isolated, as well. Which limits access to external data bases, and other resources, using trusted supported libraries that are also regularly tested for unsafe code. Then, once the application is assembled, it's web-tested using a scanner like dynamic application security tests, or DAST.

Best practices for DevSecOps include making programmers responsible for security, creating smaller modular code that security tested, isolating the code as it's being developed, to limit access to external databases and other resources. And testing the code and the application, once it's been created.


DevSecOps' key purpose is to integrate security practices throughout the software development lifecycle. From code development and a collaborative environment, to automation, and continuous security testing. It's the place where speed and security meet in their journey through the software development lifecycle.