pipeline {
    agent {label params.AGENT_LABEL} //Define the agent to run the pipeline

    parameters {
        choice(name: 'AGENT_LABEL', choices:['local', 'agent1', 'agent2', 'agent3', 'agent4'], description: 'Agent to run the pipeline') //Define the parameter array to choose the agent from
        choice(name: 'BRANCH' , choices:['master', 'dockerhub'], description: 'Branch to run the pipeline from') //Define the parameter array to choose the branch from
        string(name: 'REPO_URL', defaultValue: 'github.com/jcardogo/AlejandroCardoso_website.git', description: 'Git repository URL')
        // Parameter for Docker Hub credentials ID
        string(name: 'DOCKERHUB_CREDENTIALS_ID', defaultValue: 'dockerhub_jcardogo', description: 'Jenkins Credentials ID for Docker Hub login')
        // Parameter for Docker Hub repository name
        string(name: 'DOCKERHUB_REPO_NAME', defaultValue: 'acardogo', description: 'Docker Hub repository name')
        // Removed IMAGE_TAG parameter here, as it will be generated automatically
    }

    stages {
        stage('Wipe Workspace') {
            steps {
                echo '***** Starting wipe up working directory *****'
                deleteDir()
                echo '-------wipe up done-------'
            }
        }

        stage('Create Directory'){
            steps {
                script {
                    echo '***** Creating directory *****'
                    sh 'mkdir -p website_content'
                    echo '-------directory created-------'
                }
            }
        }

        stage('Checkout website content'){
            steps {
                echo '***** Checking out website content *****'
                dir ('website_content'){
                    withCredentials([usernamePassword(credentialsId: 'Github_PAT', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_PWD')]) {
                        git url: "https://${params.REPO_URL}", credentialsId: 'Github_PAT', branch: 'master'
                    }
                }
                echo '-------checkout done-------'
            }
        }

        stage('Dockerize Nginx'){
            steps {
                echo '***** Dockerizing website on Nginx *****'
                script {
                    sh '''
                        echo "FROM nginx:alpine" > Dockerfile
                        echo "COPY website_content/ /usr/share/nginx/html/" >> Dockerfile
                        docker build -t my-nginx-image:latest -f Dockerfile .
                    '''
                }
                echo '-------Dockerizing done-------'
            }
        }
        /* commented out to avoid issues with Docker context in Jenkins
        stage ('Check docker context') {
            steps {
                echo '***** Checking Docker context *****'
                script {
                    sh 'docker images' // List Docker images to verify the build
                    sh 'docker context ls' // List all Docker contexts
                }
                echo '-------Docker context checked-------'
            }
        }
        */

        stage('Push Image to Docker Hub') {
            steps {
                echo '***** Pushing image to Docker Hub *****'
                script {
                    def dockerImageTag = "${env.BUILD_NUMBER}" // e.g., '1', '2', '3', etc.
                    
                    withCredentials([usernamePassword(credentialsId: params.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        def fullImageName = "${DOCKER_USER}/${params.DOCKERHUB_REPO_NAME}:${dockerImageTag}"
                        
                        echo "Tagging image my-nginx-image:latest as ${fullImageName}"
                        sh "docker tag my-nginx-image:latest ${fullImageName}"
                        // Login to Docker Hub using credentials
                        sh "echo ${DOCKER_PASS} | docker login -u ${DOCKER_USER} --password-stdin" // Login to Docker Hub using password from credentials
                        
                        sh "docker info" // Print Docker info for debugging
                        echo "Pushing image ${fullImageName} to Docker Hub"
                        sh "docker push ${fullImageName}"

                        // Store the full image name in an environment variable for later stages
                        env.FULL_DOCKER_IMAGE_NAME = fullImageName
                    }
                }
                echo '-------Image pushed to Docker Hub-------'
            }
        }

        stage('Run Docker Container (Temporary for testing)'){
            steps {
                echo '***** Running Docker container locally for testing *****'
                script {
                    // Still run the 'latest' local image for simplicity in testing
                    def containerName = "test-website-${env.BUILD_NUMBER}"
                    sh 'docker run -d -p 8086:80 --name ' + containerName + ' ' + env.FULL_DOCKER_IMAGE_NAME
                }
                echo '-------Container running-------'
            }
        }

        stage('Wait 5 minutes (for container to start)') {
            steps {
                echo '***** Waiting 5 minutes for container to start *****'
                script {
                    sleep time: 5, unit: 'MINUTES'
                }
                echo '-------Waiting done-------'
            }
        }

        stage('Stop and remove Docker containers') {
            steps {
                echo '***** Stopping and removing Docker containers and images *****'
                script {
                     withCredentials([usernamePassword(credentialsId: params.DOCKERHUB_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        def pushedImageName = env.FULL_DOCKER_IMAGE_NAME
                        def containerName = "test-${env.FULL_DOCKER_IMAGE_NAME}"

                        sh 'docker stop ${containerName} || true'
                        sh 'docker rm ${containerName} || true'
                        sh 'docker rmi my-nginx-image:latest || true'
                        sh "docker rmi ${pushedImageName} || true"
                        // You might also want to log out if not handled automatically, or just let it expire
                        sh "docker logout" // Optional: if you want to explicitly log out
                        sh 'docker system prune -f'
                     }
                }
                echo '-------Docker containers and images stopped and removed-------'
            }
        }
    }
}